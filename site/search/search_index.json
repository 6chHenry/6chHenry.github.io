{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u4f60\u597d\uff01","text":"<p>\u6b22\u8fce\u6765\u52306ch.\u7684\u5c0f\u7ad9\uff01 \u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u8bb0\u5f97\u70b9\u4e2astar\u54e6\uff01</p>"},{"location":"about/","title":"\u5173\u4e8e\u6211","text":"<p>\u4f60\u597d\uff0c\u6211\u662f6ch.\u3002\u6211\u6765\u81ea\u56db\u5ddd\uff0c\u73b0\u5728\u5c31\u8bfb\u4e8e\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u673a\u68b0\u7c7b\u4e13\u4e1a\u3002\u6211\u4e8e2025\u5e742\u6708\u52a0\u5165\u81f4\u8fdc\u5de5\u79d1\u8363\u8a89\u8ba1\u5212\u3002</p>"},{"location":"about/#_2","title":"\u8054\u7cfb\u65b9\u5f0f","text":"<p>\u90ae\u7bb1:13693406552@163.com</p>"},{"location":"diaries/20250228/","title":"20250228","text":"<p>\u4eca\u5929\u665a\u4e0a\u53bb\u5357\u4f53\u8dd1\u4e86\u4f1a\u6b65\u3002\u7531\u4e8e\u662f\u590d\u5065\u72b6\u6001\uff0c\u53ea\u8dd1\u4e862.6\u516c\u91cc\uff0c\u817f\u7279\u522b\u9178\u75db\u3002\u611f\u89c9\u4ee5\u540e\u8fd8\u662f\u5f97\u6bcf\u5929\uff08\uff1f\uff09\u953b\u70bc\u4e00\u4e0b\uff0c\u6bd5\u7adf\u73b0\u5728\u597d\u4e45\u90fd\u6ca1\u6253\u7fbd\u6bdb\u7403\u4e86\uff0c\u8be5\u6362\u79cd\u8fd0\u52a8\u65b9\u5f0f\u4e86\u3002</p>"},{"location":"notes/EECS498/A1/","title":"\u7b2c\u4e00\u6b21\u4f5c\u4e1a","text":"<p>Deep Learning \\(\\in\\) Machine Learning</p> <p>Deep  Learning \\(\\cap\\) Computer Vision = EECS 498</p> <p>SIFT:\u8bc6\u522b\u56fe\u7247\u4e2d\u5c0f\u7684\u5339\u914d\u70b9\uff0c\u8ba1\u7b97\u7279\u5f81\u5411\u91cf\uff08\u4e0d\u4f1a\u56e0\u4e3a\u65cb\u8f6c\u4ee5\u53ca\u56fe\u7247\u7684\u4eae\u5ea6\u6539\u53d8\uff09</p> <p>\u79bb\u73b0\u5b9e\u751f\u6d3b\u8fd8\u6709\u4e00\u5b9a\u8ddd\u79bb\uff1a\u8ba1\u7b97\u673a\u53ea\u80fd\u770b\u5230\uff08\u8bc6\u522b\uff09\u4fe1\u606f\uff0c\u5374\u4e0d\u80fd\u7406\u89e3\u56fe\u7247\u80cc\u540e\u7684\u542b\u4e49\u3002\u4eba\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u4fe1\u606f\u6765\u63a8\u7406\u5224\u65ad\uff0c\u4f46\u8ba1\u7b97\u673a\u5f88\u96be\u505a\u5230\u3002</p> <p>x.min(dim=0)\uff1a\u4f1a\u8fd4\u56de\u4e24\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u5c31\u662f\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\uff09</p> <p>\u5982\u679c\u53ea\u60f3\u83b7\u5f97\u7d22\u5f15\u7684\u8bdd\uff0c\u5c31\u7528x.argmin()</p>"},{"location":"notes/EECS498/Linear%20Classifiers/","title":"\u7b2c\u4e00\u8282","text":"<p>Linear Classification: \\(f(x_i,W) = W \\cdot x\\)</p> <p>Matrix multiply: stretch x to a one-dimension vector,W is a matrix.</p>"},{"location":"notes/EECS498/Linear%20Classifiers/#multiclass-svm-loss","title":"Multiclass SVM Loss:","text":"<p>Let \\(f(x_i,W)\\) be scores,then the SVM scores has the form: \\(L_i = \\sum_{j\\neq y_i}\\max(0,s_j-s_{y_i}+1)\\)</p> <p>\\(s_{y_i}\\) is the correct label\u2019s score,while \\(s_j\\) is the wrong label\u2019s scores. When \\(s_j\\) is larger than \\(s_{y_i} - 1\\)</p> <p>,that means it contributes to the loss,so that \\(L_i\\) is greater than \\(0\\).</p> <p>Characteristics: 1.When give the \\(s_{y_i}\\) a little bit change,the Loss function will not change. Because after change,\\(s_{y_i}\\) is still 1 more than the wrong label\u2019s scores.</p> <p>min possible : 0 max:\\(+\\infty\\)</p> <p>When all scores are small random values,loss is \\(C - 1\\)(\\(s_j \\approx s_{y_i}\\)) where C stands for the number of categories.</p>"},{"location":"notes/EECS498/Linear%20Classifiers/#regularization","title":"Regularization","text":"<p>\\(L(W)=\\frac{1}{N}\\sum_{i=1}^NL_i(f(x_i,W),y_i)+\\lambda R(W)\\) </p> <p>The most common regularization: L2-norm \\(\\sum_i\\sum_jW_{i,j}^2\\) </p> <p>Why we need that?:</p> <ul> <li> <p>Express preferences in among models beyond \u201cminimize training error\u201d,allow people to integrate their wisdom and knowledge they\u2019ve already obtained.</p> </li> <li> <p>Avoid overfitting </p> </li> </ul> <p>Example: \\(x = [1,1,1,1] \\newline w_1=[1,0,0,0] \\newline w_2=[0.25,0.25,0.25,0.25]\\)</p> <p>It\u2019s obvious that \\(w_1^\\mathrm T \\cdot x = w_2^\\mathrm T\\cdot x = 1\\)</p> <p>L2-norm regularization prefer more balanced matrix,which is \\(w_2\\) in this example. This implies that use as many functions as possible in this preference.\u201dspread out the weights\u201d</p> <p>prefer simple models: Occam's Razor reveals the truth that simplicity is much preferred.</p>"},{"location":"notes/EECS498/Linear%20Classifiers/#cross-entropy-loss","title":"Cross Entropy Loss","text":"<p>SoftMax function: </p> cat 3.2 24.5 0.13 car 5.1 164.0 0.87 frog -1.7 0.18 0.00 <p>\u200b               unnormalized log-prob/logits --exp--&gt; unnormalized prob --normalize--&gt;probabilities</p> <p>\\(L_i = -\\ln P(Y = y_i |X = x_i)\\)  Maximum Likelihood Estimation</p> <p>min possible loss:0 (it can only approach to 0 but never truly reach)   max:\\(+\\infty\\)</p> <p>When all scores are small random values,loss is \\(-\\ln C\\) where C stands for the number of categories.</p>"},{"location":"notes/EECS498/Optimization/","title":"\u7b2c\u4e8c\u8282","text":"<p>\\(w^* = \\arg \\min_wL(w)\\)</p> <p>Idea #1 :Random Search(Bad Idea!)</p> <pre><code>bestloss = float('inf')\nfor num in xrange(1000):\n    W = np.random.randn(10,3073) * 0.001\n    loss = L(X_train,Y_train,W) #L is the loss function\n    if loss &lt; bestloss:\n        bestloss = loss\n        bestW = W\n    print(f'in attempt {num} the loss was {loss},best {bestloss}')\n</code></pre> <p>Batch Gradient Descent</p> <p>\\(L(W) = \\frac{1}{N}\\sum_{i=1}^NL_i(x_i,y_i,W)+\\lambda R(W)\\)</p> <p>\\(\\nabla_WL(W)=\\frac{1}{N}\\sum_{i=1}^N\\nabla_WL_i(x_i,y_i,W)+\\lambda\\nabla_WR(W)\\)</p> <p>Idea #2 : Stochastic Gradient Descent</p> <pre><code>w = initialize_weights()\nfor t in range(num_steps):\n    minibatch = sample_data(data,batch_size)\n    dw = compute_gradient(loss_fn,minibatch,w)\n    w- = learning_rate * dw\n</code></pre> <p>SGD: \\(x_{t+1}=x_t - \\alpha \\nabla f(x_t)\\)</p> <p>Problems:1.overshoot and never get back</p> <p>\u200b       2.settle in local minimum and saddle point</p> <p>SGD+Momentum: \\(v_{t+1}=\\rho v_t -\\alpha \\nabla f (x_t)\\)</p> <p>\u200b               \\(x_{t+1}=x_t+v_{t+1}\\) </p> <p>Nesterov Momentum:\\(v_{t+1}=\\rho v_t-\\alpha \\nabla f(x_t+\\rho v_t)\\)</p> <p>\u200b               \\(x_{t+1}=x_t+v_{t+1}\\)   Not that good :Not intuitively clear,because it uses the data of future status</p> <p>\u200b       or            $\\tilde{x_t} =x_t + \\rho v_t $</p> <p>\u200b               \\(v_{t+1}=\\rho v_t -\\alpha \\nabla f (\\tilde{x_t})\\)</p> <p>\u200b               \\(\\widetilde{x_{t+1}}=\\tilde{x_t}-\\rho v_t + (1 + \\rho) v_{t+1}\\)</p> <p>\u200b                   \\(=\\tilde{x_t}+v_{t+1}+\\rho (v_{t+1}-v_t)\\)</p> <p>AdaGrad: Progress along \u201csteep\u201d directions is damped;</p> <p>\u200b       progress along \u201cflat\u201d directions is accelerated.</p> <pre><code>grad_squared = 0\nfor t in range(num_steps):\n    dw = compute_gradient(w)\n    grad_squared += dw*dw\n    w -= learning_rate * dw / (grad_squared.sqrt() + 1e-7)\n</code></pre> <p>Problem: grad_squared is accumulative so that it will stop before getting to the bottom.(it can get very big)</p> <p>RMSProp: a leaky version of Adaguard</p> <pre><code>grad_square = 0\nfor t in range(num_steps):\n    dw = compute_gradient(w)\n    grad_squared = decay_rate * grad_squared + (1 - decay_rate) * dw * dw\n    w -= learning_rate * dw / (grad_squared.sqrt() + 1e-7)\n</code></pre> <p>Adam: RMSProp + Momentum</p> <pre><code>moment1 = 0\nmoment2 = 0\nfor t in range(num_steps):\n    dw = compute_gradient(w)\n    moment1 = beta1 * moment1 + (1-beta1) * dw #Momentum\n    moment2 = beta2 * moment2 + (1-beta2) * dw * dw #RMSProp\n    #moment1_unbias = moment1 / (1 - beta1 ** t)\n    #moment2_unbias = moment2 / (1 - beta2 ** t)\n    w -= learning_rate * moment1 / (moment2.sqrt() + 1e-7)\n    # Problem: when beta2 is approximately 1,momenent.sqrt() in the first several steps can be very small,thus leading to the */moment2.sqrt() very big.\n    #We need to correct the bias.  \n</code></pre> <p>Adam with beta1 = 0.9,beta2 = 0.999,and learning_rate = 1e-3,5e-4,1e-4 is a great starting point for many models.</p>"}]}